# This Helm Chart installs RunWhen Local & the Runner

# RunWhen Local consists of the Workspace Builder and the Troubleshooting Cheat Sheet
# 1. Workspace Builder scans your clusters or cloud accounts and matches them with
#    applicable troubleshooting commands found in CodeCollection respositories
#    Workspace Builder content is used to build a workspace in the RunWen Platform.
# 2. Troubleshooting Cheat Sheet generates live documentation from output of Workspace
#    Builder, tailoring troubleshooting commands for the specific environment
#    and providing helpful documentation

# The Runner is the agent that contacts the RunWhen Platform and executes codebundle
# code, which is either:
# 1. Executing tasks (investigative troubleshooting or operational readiness checks)
#    as instructed by a user or Digital Assistant and submitting the results back
#    to the RunWhen Platform
# 2. Measuring the health of a service and pushing a metric to the RunWhen Platform

###############################################################################
######################## Global/Shared Settings ###############################
###############################################################################
workspaceName: [workspace-name]

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

###############################################################################
######################## RunWhen Local Configuration ##########################
###############################################################################

runwhenLocal:
  enabled: true
  image:
    repository: ghcr.io/runwhen-contrib/runwhen-local
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    name: "runwhen-local"


  serviceAccountRoles:
    namespaceRole:
      enabled: false
      namespaces: []
      rules:
      - apiGroups: [""]
        resources: ["*"]
        verbs: ["get", "watch", "list"]
    clusterRoleView:
      enabled: true
    advancedClusterRole:
      enabled: false
      rules: []
      # - apiGroups: [""]
      #   resources: ["pods", "pods/log", "events", "configmaps", "services", "replicationcontrollers"]
      #   verbs: ["get", "watch", "list"]
      # - apiGroups: ["batch"]
      #   resources: ["*"]
      #   verbs: ["get", "watch", "list"]

  service:
    type: ClusterIP
    port: 8081

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1024Mi"
      cpu: "1"

  # RunWhen Local requires a kubeconfig to discover resouces from 1 or more
  # clusters.
  #
  # Using inClusterAuth works for the local cluster only.
  # If discovering multiple clusters, set inClusterAuth.enabled=false
  # and mount a secret with a kubeconfig that contains all
  # cluster contexts to be discovered

  discoveryKubeconfig:
    inClusterAuth:
      enabled: true
    secretProvided:
      enabled: false
      # secretName: kubeconfig
      # secretKey: kubeconfig
      # secretPath: kubeconfig

  ### RunWhen Local Runtime Configuration
  # autoRun: start discovery on deployment, and re-run discovery evey discoveryInterval seconds
  # also supports upload configuration for continuous updates of RunWhen Platform Workspace
  # upload is disabled by default; requires a valid uploadInfo.yaml
  autoRun:
    discoveryInterval: 14400                 # seconds to wait until a new discovery
    uploadEnabled: false                     # upload configuration to RunWhen Platform
    uploadMergeMode: "keep-uploaded"         # 'keep-uploaded' or 'keep-existing'


  # Terminal: Enable or disable the in-browser terminal
  # Note: The terminal provides an unauthenticated connection to container shell
  terminal:
    disabled: true

  # Enable debug logging
  debugLogs: true

  ## uploadInfo
  # The upload configuration applies only to users to leverage RunWhen Local as an
  # onboarding tool into RunWhen Platform (https://docs.runwhen.com/public/v/runwhen-local/user-guide/features/upload-to-runwhen-platform for more details)
  # When uploading discovered resources and configuration information to RunWhen Platform,
  # workspaceName, token, workspaceOwnerEmail, defaultLocation and papiURL are mandtatory
  # can can be obtained immediately after creating a RunWhen Platform workspace.
  uploadInfo:
    secretProvided:
      enabled: false
      # secretName: "uploadinfo"
      # secretKey: uploadInfo.yaml
      # secretPath: uploadInfo.yaml


  ## workspaceInfo
  # Currently this holds details such as custom variables & upload configuration
  # See https://docs.runwhen.com/public/v/runwhen-local/user-guide/user_guide-advanced_configuration/workspaceinfo-customization

  workspaceInfo:
    useExistingConfigMap: false
    existingConfigMapName: ""
    configMap:
      create: true
      name: workspace-builder
      data:
        defaultLocation: none
        workspaceOwnerEmail: tester@my-company.com
        # More workspace config
        # Default Level of Detail(LOD): none, basic, or detailed
        # https://docs.runwhen.com/public/v/runwhen-local/user-guide/user_guide-advanced_configuration/workspaceinfo-customization/level-of-detail
        defaultLOD: detailed
        cloudConfig:
          kubernetes:
            kubeconfigFile: /shared/kubeconfig
            namespaceLODs:
              kube-system: 0
              kube-public: 0
              kube-node-lease: 0
        custom:
          kubeconfig_secret_name: kubeconfig
          kubernetes_distribution_binary: kubectl
          cloud_provider: none
          gcp_project_id: none
          gcp_ops_suite_sa: none


###############################################################################
######################## Runner Configuration #################################
###############################################################################

runner:
  enabled: false
  image: "us-docker.pkg.dev/runwhen-nonprod-shared/public-images/runner:latest"
  controlAddr: "https://runner.beta.runwhen.com"
  metrics:
    url: "https://runner-cortex-tenant.beta.runwhen.com/push"

# grafana-agent is only deployed if runner.enabled is true
# https://github.com/grafana/agent/blob/main/operations/helm/charts/grafana-agent/values.yaml
grafana-agent:
  agent:
    mode: 'flow'
    configMap:
      create: false
      name: grafana-agent
      key: config.river
    mounts:
      extra:
        - name: tls-secret-volume
          mountPath: /tls
          readOnly: true
  controller:
    type: deployment
    volumes:
      extra:
        - name: tls-secret-volume
          secret:
            secretName: runner-metrics-tls
  rbac:
    create: false
  serviceAccount:
    create: false
    name: grafana-agent
