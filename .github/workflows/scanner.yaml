name: Trivy Scan for Critical Vulnerabilities

permissions: 
  contents: write

on:
  workflow_dispatch:
    inputs:
      registries:
        description: "List of image registries to scan"
        required: false
        default: |
          - us-docker.pkg.dev/runwhen-nonprod-shared/public-images/robot-runtime-base-image:latest
  schedule:
    # This cron runs at 11:00 UTC and 21:00 UTC every day
    - cron: "0 11,21 * * *"
  pull_request:
    types: [opened, synchronize]

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code using PAT
        uses: actions/checkout@v3
        with:
          # IMPORTANT: Replace 'PAT' with the actual secret name you defined.
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Determine branch
        id: determine-branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Pull Request => use github.head_ref (e.g., "feature/my-branch")
            echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
          else
            # Push => strip 'refs/heads/' from github.ref
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi

      - name: Enforce local branch
        run: |
          BRANCH_NAME="${{ steps.determine-branch.outputs.BRANCH_NAME }}"
          git checkout -B "$BRANCH_NAME"

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Render Helm Chart to YAML
        id: render-helm
        run: |
          cd charts/runwhen-local
          yq eval '.dependencies[] | .repository' Chart.yaml | while read -r repo; do
            name=$(echo $repo | sed 's|https://||' | sed 's|http://||' | awk -F'/' '{print $1}')
            echo "Adding Helm repository $name with URL $repo"
            helm repo add $name $repo || true
          done
          helm repo update
          helm dependency build
          helm template . --set runner.enabled=true > ../../rendered_chart.yaml
          echo "Rendered Helm chart to YAML in ../../rendered_chart.yaml."

      - name: Verify Rendered YAML File
        run: |
          if [ ! -f "rendered_chart.yaml" ]; then
            echo "Rendered YAML file does not exist!"
            exit 1
          fi
          echo "Rendered YAML file exists."

      - name: Extract Images from Rendered YAML
        id: extract-images
        run: |
          grep -E "image:|\"image:" rendered_chart.yaml \
            | sed -e 's/.*image: *//' -e 's/^"//' -e 's/"$//' > registries.txt
          sort -u registries.txt -o registries.txt
          echo "Images extracted from Helm chart:"
          cat registries.txt
          echo "Total images found: $(wc -l < registries.txt)"

      - name: Add Workflow Input Registries
        id: add-input-registries
        run: |
          # Add additional registries specified in workflow inputs
          echo "${{ github.event.inputs.registries }}" \
            | sed 's/- /\n/g' \
            | sed 's/^ *//;s/ *$//' \
            >> registries.txt
          sort -u registries.txt -o registries.txt
          echo "Combined list of registries (after user input):"
          cat registries.txt
          echo "Total registries found: $(wc -l < registries.txt)"

      - name: Download codecollections.yaml and parse images
        run: |
          registry_prefix="us-west1-docker.pkg.dev/runwhen-nonprod-beta/public-images"
          branch="main"
          # 1) Download codecollections.yaml
          curl -L https://raw.githubusercontent.com/runwhen-contrib/codecollection-registry/main/codecollections.yaml -o codecollections.yaml

          # 2) Extract 'org' and 'codecollection' from each 'git_url'
          grep -E 'git_url:' codecollections.yaml \
            | sed -E 's|.*github.com/([^/]+)/([^/[:space:]]+)(\.git)?|\1 \2|' \
            > codecollections_raw.txt

          echo "Extracted org and codecollection from codecollections.yaml:"
          cat codecollections_raw.txt

          # 3) Construct the image pattern: us-west1-docker.pkg.dev/runwhen-nonprod-beta/public-images/${org}-${codecollection}-${branch}:latest
          while read -r org codecollection; do
            # Trim possible trailing .git if it wasn't removed by sed
            codecollection="${codecollection%.git}"
            echo "${registry_prefix}/${org}-${codecollection}-${branch}:latest"
          done < codecollections_raw.txt >> registries.txt

          # 4) Sort & ensure uniqueness
          sort -u registries.txt -o registries.txt

          echo "Updated list of registries after adding codecollections:"
          cat registries.txt
          echo "Total registries found: $(wc -l < registries.txt)"

      - name: Install latest Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r .tag_name)
          STRIPPED_VERSION=${TRIVY_VERSION#v}
          wget https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${STRIPPED_VERSION}_Linux-64bit.deb
          sudo dpkg -i trivy_${STRIPPED_VERSION}_Linux-64bit.deb

      - name: Verify registry entries and file reading
        run: |
          echo "Reading registries from registries.txt:"
          while IFS= read -r registry || [[ -n "$registry" ]]; do
            echo "Registry: '$registry'"
          done < registries.txt
    
      - name: Scan each registry and aggregate results
        id: trivy-scan
        run: |
          echo "[]" > aggregated_results.json

          while IFS= read -r registry || [[ -n "$registry" ]]; do
            echo "Scanning registry: '$registry'..."
            if [[ -z "$registry" ]]; then
              echo "Error: Empty registry value detected. Skipping..."
              continue
            fi

            trivy image --severity CRITICAL,HIGH --ignore-unfixed --scanners vuln --format json "$registry" > trivy_result.json
            if [[ ! -s trivy_result.json ]]; then
              echo "Error: Trivy scan failed for '$registry'. Skipping..."
              continue
            fi

            jq --arg registry "$registry" '
              [ .Results[]?
                | (.Vulnerabilities? // [])
                | .[] 
                | . + { "Registry": $registry }
              ]
            ' trivy_result.json > vulnerabilities.json

            jq -s '.[0] + .[1]' aggregated_results.json vulnerabilities.json > temp.json
            mv temp.json aggregated_results.json
          done < registries.txt

      - name: Calculate aggregated metrics
        id: calculate-metrics
        run: |
          echo "Calculating total Critical vulnerabilities..."
          critical_count=$(jq '[ .[] | select(.Severity == "CRITICAL") ] | length' aggregated_results.json)
          echo "Total Critical vulnerabilities: $critical_count"
          echo "critical_count=$critical_count" >> $GITHUB_ENV

          echo "Calculating total High vulnerabilities..."
          high_count=$(jq '[ .[] | select(.Severity == "HIGH") ] | length' aggregated_results.json)
          echo "Total High vulnerabilities: $high_count"
          echo "high_count=$high_count" >> $GITHUB_ENV

      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        with:
          name: trivy_aggregated_results
          path: aggregated_results.json

      - name: Display total critical vulnerabilities
        run: |
          echo "Total Critical vulnerabilities: ${{ env.critical_count }}"

      - name: Display total high vulnerabilities
        run: |
          echo "Total High vulnerabilities: ${{ env.high_count }}"

      - name: Generate summary output
        id: generate-summary
        run: |
          # Save the vulnerability summary to a variable
          summary=$(jq -r '
            def group_vulns:
              reduce .[] as $v ({}; 
                # Group on ID + PkgName + versions
                .[$v.VulnerabilityID + "@" + $v.PkgName + "@" + $v.InstalledVersion + "@" + $v.FixedVersion]
                  += [ $v ]
              );
            group_vulns
            | to_entries
            | map(.value)
            | flatten
            | unique_by(.VulnerabilityID, .PkgName, .InstalledVersion, .FixedVersion)
            | sort_by(.Registry)
            | (["Registry","Package","Vulnerability ID","Installed Version","Fixed Version","Severity"]
              | (., map(length * "-"))),
              (.[]
                | [.Registry, .PkgName, .VulnerabilityID, .InstalledVersion, .FixedVersion, .Severity])
            | @tsv
          ' aggregated_results.json | column -t -s $'\t')

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate scanned images list
        id: generate-image-list
        run: |
          # Final list of all images that were scanned is simply registries.txt
          # Sort them once more just to be safe
          sort -u registries.txt -o registries.txt
          images_list="$(cat registries.txt)"
          echo "images_list<<EOF" >> $GITHUB_OUTPUT
          echo "$images_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update README with Trivy Summary & Scanned Images
        run: |
          summary_marker_start="<!-- START_TRIVY_SUMMARY -->"
          summary_marker_end="<!-- END_TRIVY_SUMMARY -->"
          images_marker_start="<!-- START_SCANNED_IMAGES -->"
          images_marker_end="<!-- END_SCANNED_IMAGES -->"

          summary="$(echo '```'; echo "${{ steps.generate-summary.outputs.summary }}"; echo '```')"
          images_list="$(echo '```'; echo "${{ steps.generate-image-list.outputs.images_list }}"; echo '```')"

          # Ensure README exists
          if [ ! -f README.md ]; then
            touch README.md
          fi

          # 1) Insert/Update the Trivy summary
          if ! grep -q "$summary_marker_start" README.md; then
            # Markers don't exist, append them
            {
              echo ""
              echo "$summary_marker_start"
              echo "$summary_marker_end"
            } >> README.md
          fi
          # Now replace text between markers
          sed -i "/$summary_marker_start/,/$summary_marker_end/{/$summary_marker_start/!{/$summary_marker_end/!d}}" README.md
          sed -i "/$summary_marker_start/ r /dev/stdin" README.md <<< "$summary"

          # 2) Insert/Update the Scanned Images list
          if ! grep -q "$images_marker_start" README.md; then
            # Markers don't exist, append them
            {
              echo ""
              echo "$images_marker_start"
              echo "$images_marker_end"
            } >> README.md
          fi
          # Now replace text between markers
          sed -i "/$images_marker_start/,/$images_marker_end/{/$images_marker_start/!{/$images_marker_end/!d}}" README.md
          sed -i "/$images_marker_start/ r /dev/stdin" README.md <<< "$images_list"

      - name: Commit and force-push to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add README.md
          if git diff --cached --exit-code; then
            echo "No changes."
            exit 0
          fi

          git commit -m "Automated update"
          # Force push to main using the PAT
          git push origin main --force
