name: Trivy Scan for Critical Vulnerabilities

on:
  workflow_dispatch:
    inputs:
      registries:
        description: "List of image registries to scan"
        required: true
        default: |
          - us-docker.pkg.dev/runwhen-nonprod-shared/public-images/robot-runtime-base-image:latest
          - ghcr.io/runwhen-contrib/runwhen-local:latest

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install latest Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r .tag_name)
          STRIPPED_VERSION=${TRIVY_VERSION#v}
          wget https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${STRIPPED_VERSION}_Linux-64bit.deb
          sudo dpkg -i trivy_${STRIPPED_VERSION}_Linux-64bit.deb

      - name: Parse registry list
        id: parse-registries
        run: |
          echo "${{ github.event.inputs.registries }}" | sed 's/- //g' > registries.txt
          echo "Parsed registries:"
          cat registries.txt
      
      - name: Initialize aggregated results
        run: |
          echo '{"Vulnerabilities": []}' > aggregated_results.json

      - name: Scan each registry and aggregate results
        id: trivy-scan
        run: |
          while IFS= read -r registry || [[ -n "$registry" ]]; do
            echo "Scanning $registry..."
            trivy image --severity CRITICAL --ignore-unfixed --format json "$registry" > trivy_result.json

            # Add registry details to each vulnerability
            jq --arg registry "$registry" '.Results[].Vulnerabilities[] |= . + {"Registry": $registry}' trivy_result.json | \
            jq -s '{"Vulnerabilities": .}' > vulnerabilities.json

            # Merge the current results with the aggregated results
            jq -s '.[0].Vulnerabilities + .[1].Vulnerabilities | {Vulnerabilities: .}' aggregated_results.json vulnerabilities.json > temp.json && mv temp.json aggregated_results.json
          done < registries.txt

      - name: Calculate aggregated metric
        id: calculate-metrics
        run: |
          critical_count=$(jq '.Vulnerabilities | map(select(.Severity == "CRITICAL")) | length' aggregated_results.json)
          echo "Total Critical vulnerabilities: $critical_count"
          echo "critical_count=$critical_count" >> $GITHUB_ENV

      - name: Upload aggregated results
        uses: actions/upload-artifact@v3
        with:
          name: trivy_aggregated_results
          path: aggregated_results.json

      - name: Display total critical vulnerabilities
        run: |
          echo "Total Critical vulnerabilities: ${{ env.critical_count }}"